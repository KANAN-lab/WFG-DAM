<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <!-- Font Awesome CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

    <!-- SweetAlert2 CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.1.9/dist/sweetalert2.min.css">

    <!-- Lottie Player CDN -->
    <script src="https://unpkg.com/@lottiefiles/lottie-player@latest/dist/lottie-player.js"></script>

    <style>
      body {
        font-family: 'Arial', sans-serif;
        background-color: #f8f9fa;
      }

      h2 {
        margin-bottom: 30px;
        color: #4CAF50;
        font-size: 28px;
      }

      h3 {
        font-size: 22px;
        margin-bottom: 20px;
      }

      .tables-container {
        display: flex;
        flex-direction: column;
        gap: 40px;
        margin-top: 20px;
      }

      /* Table headers with black background */
      table thead th {
        background-color: #000000 !important;
        color: white !important;
        font-size: 18px;
      }

      td {
        font-size: 16px;
        padding: 12px;
      }

      .btn-success {
        background-color: #28a745;
        border-color: #28a745;
        font-size: 18px;
        padding: 10px 20px;
      }

      .btn-success:hover {
        background-color: #218838;
      }

      .form-select {
        padding: 10px;
        font-size: 18px;
      }

      .table th, .table td {
        vertical-align: middle;
        border: 1px solid #ddd;
      }

      .move-button i {
        margin-right: 5px;
      }

      .main-container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        padding: 20px;
      }

      .card {
        border-radius: 15px;
        box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.1);
        padding: 30px;
        background-color: white;
      }

      /* Ensure table responsiveness */
      .table-responsive {
        margin-bottom: 20px;
        overflow-x: auto;
      }

      /* Full-screen loading animation overlay */
      #loading-animation {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(255, 255, 255, 0.8);
        backdrop-filter: blur(5px);
        z-index: 9999;
        justify-content: center;
        align-items: center;
      }

      /* Responsive adjustments for mobile */
      @media (max-width: 576px) {
        th, td {
          font-size: 14px;
        }

        h2, h3 {
          font-size: 24px;
        }

        .form-select {
          font-size: 16px;
        }

        .btn-success {
          font-size: 16px;
        }
      }
    </style>

    <title>Lane Status Viewer</title>
  </head>
  <body>
    <div class="container main-container" id="main-content">
      <div class="card col-12 col-md-10 col-lg-8">
        <h2 class="text-center"><i class="fas fa-traffic-light"></i> Lane Status Viewer</h2>
        
        <!-- Dropdowns for Source and Target -->
        <div class="row g-4 mb-4">
          <!-- Source Zona and Lane -->
          <div class="col-md-6">
            <label for="zonaSumber" class="form-label"><i class="fas fa-map-marker-alt"></i> Zona Sumber</label>
            <select class="form-select" id="zonaSumber" onchange="handleZonaChange('sumber')">
              <option value="">-- Select Zona --</option>
              <option value="A">A</option>
              <option value="B">B</option>
              <option value="E">E</option>
            </select>
          </div>

          <div class="col-md-6">
            <label for="laneSumber" class="form-label"><i class="fas fa-road"></i> Lane Sumber</label>
            <select class="form-select" id="laneSumber" onchange="filterData()">
              <option value="">-- Select Source Lane --</option>
            </select>
          </div>
          
          <!-- Target Zona and Lane -->
          <div class="col-md-6">
            <label for="zonaTarget" class="form-label"><i class="fas fa-map-marker-alt"></i> Zona Target</label>
            <select class="form-select" id="zonaTarget" onchange="handleZonaChange('target')">
              <option value="">-- Select Zona --</option>
              <option value="A">A</option>
              <option value="B">B</option>
              <option value="E">E</option>
            </select>
          </div>

          <div class="col-md-6">
            <label for="laneTarget" class="form-label"><i class="fas fa-road"></i> Lane Target</label>
            <select class="form-select" id="laneTarget" onchange="filterData()">
              <option value="">-- Select Target Lane --</option>
            </select>
          </div>
        </div>

        <!-- Move Button -->
        <div class="text-center mb-5">
          <button class="move-button btn btn-success" onclick="moveSelectedData()">
            <i class="fa-solid fa-shuffle"></i> Move Data
          </button>
        </div>

        <!-- Loading Animation Container -->
        <div id="loading-animation">
          <lottie-player 
            src="https://lottie.host/d3ad31d4-295f-4166-be56-933bfc76339d/ZukUwTWjfj.json" 
            background="transparent" 
            speed="1" 
            style="width: 300px; height: 300px;" 
            loop autoplay>
          </lottie-player>
        </div>
        
        <div class="tables-container">
          <!-- Source Data Table -->
          <div>
            <h3><i class="fas fa-database"></i> Source Data</h3>
            <div class="table-responsive">
              <table class="table table-bordered table-striped table-hover" id="dataTableSumber">
                <thead>
                  <tr>
                    <th>Lane</th>
                    <th>Zona</th>
                    <th>Quantity</th>
                    <th>MID</th>
                    <th>Setting</th>
                    <th>Date</th>
                  </tr>
                </thead>
                <tbody>
                  <!-- Source table data will be dynamically inserted here -->
                </tbody>
              </table>
            </div>
          </div>
          
          <!-- Target Data Table -->
          <div>
            <h3><i class="fas fa-database"></i> Target Data</h3>
            <div class="table-responsive">
              <table class="table table-bordered table-striped table-hover" id="dataTableTarget">
                <thead>
                  <tr>
                    <th>Lane</th>
                    <th>Zona</th>
                    <th>Quantity</th>
                    <th>MID</th>
                    <th>Setting</th>
                    <th>Date</th>
                  </tr>
                </thead>
                <tbody>
                  <!-- Target table data will be dynamically inserted here -->
                </tbody>
              </table>
            </div>
          </div>
        </div>

        <!-- Message Display Area -->
        <div id="message" class="mt-4 text-center fw-bold"></div>
      </div>
    </div>

    <!-- Client-Side JavaScript -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/lottie-web/5.7.4/lottie.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.1.9/dist/sweetalert2.min.js"></script>

    <script>
      let allData = [];

      // Mapping for units based on zone
      const zoneUnitMapping = {
        "A": "Pallet",
        "B": "Pallet",
        "E": "Box"
      };

      // Load the data from the Google Sheet when the page loads
      window.onload = function() {
        google.script.run.withSuccessHandler(function(data) {
          allData = data;
          filterData(); // Filter data when the page loads
        }).withFailureHandler(function(error) {
          console.error('Error fetching data:', error.message);
          document.getElementById('message').style.color = 'red';
          document.getElementById('message').textContent = 'Error fetching data: ' + error.message;
        }).getDataLaneStatus();
      };

      // Function to handle zone changes and update lane options
      function handleZonaChange(type) {
        let zonaSelect = document.getElementById(type === 'sumber' ? 'zonaSumber' : 'zonaTarget');
        let laneSelect = document.getElementById(type === 'sumber' ? 'laneSumber' : 'laneTarget');
        let zona = zonaSelect.value;

        // Remove existing lane options
        laneSelect.innerHTML = type === 'sumber' 
          ? '<option value="">-- Select Source Lane --</option>' 
          : '<option value="">-- Select Target Lane --</option>';

        if (!zona) {
          filterData();
          return;
        }

        let laneOptions = [];
        if (zona === 'A' || zona === 'B') {
          for (let i = 1; i <= 26; i++) {
            laneOptions.push(`${i}${zona}`);
          }
        } else if (zona === 'E') {
          for (let i = 1; i <= 15; i++) {
            laneOptions.push(`${i}${zona}`);
          }
        }

        laneOptions.forEach(function(lane) {
          let option = document.createElement('option');
          option.value = lane;
          option.text = lane;
          laneSelect.add(option);
        });

        filterData(); // Apply data filter after zone change
      }

      // Function to format quantity with unit
      function formatQuantity(quantity, zona) {
        let unit = zoneUnitMapping[zona] || '';
        if (!quantity || isNaN(quantity)) {
          return `0 ${unit}`;
        }
        return `${quantity} ${unit}`;
      }

      // Function to filter data based on selected source and target lanes
      function filterData() {
        let zonaSumber = document.getElementById('zonaSumber').value;
        let laneSumber = document.getElementById('laneSumber').value;
        let zonaTarget = document.getElementById('zonaTarget').value;
        let laneTarget = document.getElementById('laneTarget').value;

        console.log('Filtering data...');

        // Filter data for source (Source Data)
        let filteredSumber = allData.filter(function(row) {
          if (!zonaSumber) return false;
          let [lane, zona] = row;
          return zona.trim().toUpperCase() === zonaSumber.trim().toUpperCase() && 
                 (!laneSumber || lane.trim().toUpperCase() === laneSumber.trim().toUpperCase());
        });

        // Update source table
        let tbodySumber = document.getElementById('dataTableSumber').getElementsByTagName('tbody')[0];
        tbodySumber.innerHTML = ''; // Clear existing rows
        filteredSumber.forEach(function(row) {
          let tr = document.createElement('tr');
          // Lane
          let tdLane = document.createElement('td');
          tdLane.textContent = row[0];
          tr.appendChild(tdLane);
          // Zona
          let tdZona = document.createElement('td');
          tdZona.textContent = row[1];
          tr.appendChild(tdZona);
          // Quantity with Unit
          let tdQuantity = document.createElement('td');
          tdQuantity.textContent = formatQuantity(row[2], row[1].trim().toUpperCase());
          tr.appendChild(tdQuantity);
          // MID
          let tdMID = document.createElement('td');
          tdMID.textContent = row[3];
          tr.appendChild(tdMID);
          // Setting
          let tdSetting = document.createElement('td');
          tdSetting.textContent = row[4];
          tr.appendChild(tdSetting);
          // Date
          let tdDate = document.createElement('td');
          tdDate.textContent = row[5];
          tr.appendChild(tdDate);

          tbodySumber.appendChild(tr);
        });

        // If no source data found, display message
        if (filteredSumber.length === 0 && zonaSumber && laneSumber) {
          tbodySumber.innerHTML = `<tr><td colspan="6" class="text-center">No data found for selected Source.</td></tr>`;
        }

        // Filter data for target (Target Data)
        let filteredTarget = allData.filter(function(row) {
          if (!zonaTarget) return false;
          let [lane, zona] = row;
          return zona.trim().toUpperCase() === zonaTarget.trim().toUpperCase() && 
                 (!laneTarget || lane.trim().toUpperCase() === laneTarget.trim().toUpperCase());
        });

        // Update target table
        let tbodyTarget = document.getElementById('dataTableTarget').getElementsByTagName('tbody')[0];
        tbodyTarget.innerHTML = ''; // Clear existing rows
        filteredTarget.forEach(function(row) {
          let tr = document.createElement('tr');
          // Lane
          let tdLane = document.createElement('td');
          tdLane.textContent = row[0];
          tr.appendChild(tdLane);
          // Zona
          let tdZona = document.createElement('td');
          tdZona.textContent = row[1];
          tr.appendChild(tdZona);
          // Quantity with Unit
          let tdQuantity = document.createElement('td');
          tdQuantity.textContent = formatQuantity(row[2], row[1].trim().toUpperCase());
          tr.appendChild(tdQuantity);
          // MID
          let tdMID = document.createElement('td');
          tdMID.textContent = row[3];
          tr.appendChild(tdMID);
          // Setting
          let tdSetting = document.createElement('td');
          tdSetting.textContent = row[4];
          tr.appendChild(tdSetting);
          // Date
          let tdDate = document.createElement('td');
          tdDate.textContent = row[5];
          tr.appendChild(tdDate);

          tbodyTarget.appendChild(tr);
        });

        // If no target data found, display message
        if (filteredTarget.length === 0 && zonaTarget && laneTarget) {
          tbodyTarget.innerHTML = `<tr><td colspan="6" class="text-center">No data found for selected Target.</td></tr>`;
        }
      }

      // Function to move data and log it
      function moveSelectedData() {
        let zonaSumber = document.getElementById('zonaSumber').value;
        let laneSumber = document.getElementById('laneSumber').value;
        let zonaTarget = document.getElementById('zonaTarget').value;
        let laneTarget = document.getElementById('laneTarget').value;
        let messageDiv = document.getElementById('message');

        // Validation
        if (!zonaSumber || !laneSumber || !zonaTarget || !laneTarget) {
          messageDiv.style.color = 'red';
          messageDiv.textContent = 'Please select all Zona and Lane options for Source and Target before moving data.';
          return;
        }

        // Proceed directly to initiate data transfer
        initiateDataTransfer();
      }

      // Function to initiate data transfer
      function initiateDataTransfer(alasan = null) {
        let zonaSumber = document.getElementById('zonaSumber').value;
        let laneSumber = document.getElementById('laneSumber').value;
        let zonaTarget = document.getElementById('zonaTarget').value;
        let laneTarget = document.getElementById('laneTarget').value;
        let messageDiv = document.getElementById('message');

        // Find source data
        let sumberData = allData.find(function(row) {
          return row[0].trim().toUpperCase() === laneSumber.trim().toUpperCase() && 
                 row[1].trim().toUpperCase() === zonaSumber.trim().toUpperCase();
        });

        if (!sumberData) {
          messageDiv.style.color = 'red';
          messageDiv.textContent = 'Source data not found.';
          return;
        }

        let availableQuantity = parseInt(sumberData[2], 10);
        let sumberMID = sumberData[3].trim().toUpperCase();

        if (isNaN(availableQuantity) || availableQuantity <= 0) {
          messageDiv.style.color = 'red';
          messageDiv.textContent = 'No quantity available to transfer from the source.';
          return;
        }

        // Get unit based on source zone
        let unit = zoneUnitMapping[zonaSumber.trim().toUpperCase()] || '';

        // Prompt user to enter the quantity to transfer with unit included
        Swal.fire({
          title: 'Enter Quantity to Transfer',
          input: 'number',
          inputLabel: `Quantity (${unit})`,
          inputAttributes: {
            min: 1,
            max: availableQuantity,
            step: 1
          },
          inputValidator: (value) => {
            return new Promise((resolve) => {
              if (!value) {
                resolve('You must enter a quantity.');
              } else if (isNaN(value) || value < 1) {
                resolve('Please enter a valid quantity.');
              } else if (parseInt(value, 10) > availableQuantity) {
                resolve(`Quantity cannot exceed ${availableQuantity}.`);
              } else {
                resolve();
              }
            });
          },
          showCancelButton: true,
          confirmButtonText: 'Continue',
          cancelButtonText: 'Cancel'
        }).then((result) => {
          if (result.isConfirmed) {
            let transferQuantity = parseInt(result.value, 10);

            // Display confirmation dialog before proceeding with the transfer
            let confirmationHtml = `
              <p>You are about to transfer <strong>${transferQuantity} ${unit}</strong> from <strong>${laneSumber} (${zonaSumber})</strong> to <strong>${laneTarget} (${zonaTarget})</strong>.</p>
              <p><strong>Current Source Quantity:</strong> ${availableQuantity} ${unit}</p>
            `;

            if (zonaSumber.trim().toUpperCase() !== zonaTarget.trim().toUpperCase()) {
              // Prompt for reason if zones are different
              Swal.fire({
                title: 'Reason for Different Zone Transfer',
                input: 'textarea',
                inputLabel: 'Please provide a reason for transferring data to a different zone:',
                inputPlaceholder: 'Enter reason here...',
                inputAttributes: {
                  'aria-label': 'Enter reason'
                },
                showCancelButton: true,
                confirmButtonText: 'Continue',
                cancelButtonText: 'Cancel',
                inputValidator: (value) => {
                  if (!value) {
                    return 'You must enter a reason!';
                  }
                }
              }).then((reasonResult) => {
                if (reasonResult.isConfirmed) {
                  let alasan = reasonResult.value;
                  confirmationHtml += `<p><strong>Reason for Transfer:</strong> ${alasan}</p>`;
                  showConfirmationDialog(transferQuantity, confirmationHtml, alasan);
                }
              });
            } else {
              // If zones are the same, proceed directly
              showConfirmationDialog(transferQuantity, confirmationHtml);
            }
          }
        });
      }

      // Function to show confirmation dialog and proceed with transfer
      function showConfirmationDialog(transferQuantity, confirmationHtml, alasan = null) {
        Swal.fire({
          title: 'Confirm Data Transfer',
          html: confirmationHtml,
          icon: 'warning',
          showCancelButton: true,
          confirmButtonText: 'Yes, transfer',
          cancelButtonText: 'Cancel'
        }).then((confirmResult) => {
          if (confirmResult.isConfirmed) {
            let zonaSumber = document.getElementById('zonaSumber').value;
            let laneSumber = document.getElementById('laneSumber').value;
            let zonaTarget = document.getElementById('zonaTarget').value;
            let laneTarget = document.getElementById('laneTarget').value;

            // Show loading animation and blur background
            document.getElementById('loading-animation').style.display = 'flex';

            // Send request to server-side with transfer quantity and reason if any
            google.script.run
              .withSuccessHandler(function(response) {
                console.log(response);

                // Hide loading animation
                document.getElementById('loading-animation').style.display = 'none';

                // Show success alert using SweetAlert
                Swal.fire({
                  icon: 'success',
                  title: 'Data Transferred Successfully',
                  text: response,
                  confirmButtonText: 'OK'
                });

                // Reload data after transfer
                google.script.run.withSuccessHandler(function(data) {
                  allData = data;
                  filterData();
                }).getDataLaneStatus();

              })
              .withFailureHandler(function(error) {
                console.error('Error moving data:', error.message);

                // Hide loading animation
                document.getElementById('loading-animation').style.display = 'none';

                // Show error alert using SweetAlert
                Swal.fire({
                  icon: 'error',
                  title: 'Failed to Transfer Data',
                  text: error.message,
                  confirmButtonText: 'OK'
                });

              })
              .moveDataWithLogging(zonaSumber, laneSumber, zonaTarget, laneTarget, transferQuantity, alasan);
          }
        });
      }
    </script>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
  </body>
</html>
