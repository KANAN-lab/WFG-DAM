<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>SO ZONA ECERAN</title>
  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://unpkg.com/html5-qrcode/minified/html5-qrcode.min.js"></script>
  <style>
    body {
      background-color: #f8f9fa;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .container {
      max-width: 600px;
    }

    h2 {
      color: #007bff;
      font-weight: bold;
      text-align: center;
      margin-bottom: 30px;
    }

    .form-section {
      display: none;
      background-color: #fff;
      padding: 30px;
      border-radius: 10px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .form-section.active {
      display: block;
    }

    .form-group label {
      color: #495057;
      font-weight: bold;
    }

    .form-control {
      border-radius: 5px;
      box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);
    }

    .btn {
      border-radius: 5px;
      padding: 10px 20px;
      font-size: 16px;
    }

    .btn-primary {
      background-color: #007bff;
      border-color: #007bff;
    }

    .btn-primary:hover {
      background-color: #0056b3;
      border-color: #0056b3;
    }

    .btn-secondary {
      background-color: #6c757d;
      border-color: #6c757d;
    }

    .btn-secondary:hover {
      background-color: #565e64;
      border-color: #565e64;
    }

    .invalid-feedback {
      display: none;
    }

    .is-invalid~.invalid-feedback {
      display: block;
    }

    @media (max-width: 768px) {
      .container {
        padding: 0 15px;
      }

      .form-section {
        padding: 20px;
      }

      h2 {
        font-size: 24px;
        margin-bottom: 20px;
      }

      .btn {
        width: 100%;
        margin-bottom: 10px;
      }

      .btn:last-child {
        margin-bottom: 0;
      }
    }

    @media (max-width: 576px) {
      h2 {
        font-size: 20px;
      }

      .form-section {
        padding: 15px;
      }
    }

    .outer-div {
      height: 500px;
      position: relative;
      /* Mengatur posisi relative */
    }

    .inner-div {
      width: 300px;
      height: 300px;
      position: relative;
      /* Mengatur posisi absolute */
    }

    #backToSOButton {
      display: none;
      /* Hide by default */
    }

    #qr-reader {
            border: 4px solid #333;
            border-radius: 10px;
            width: 300px;
            height: 300px;
            position: relative;
    }

    button {
            padding: 5px 20px;
            font-size: 1em;
            color: white;
            background-color: #007bff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin: 5px;
        }

    button:hover {
      background-color: #0056b3;
    }

  </style>
</head>

<body>
  </div>
  <div class="container mt-5">
    <div class="row justify-content-center outer-div">
      <div class="inner-div">
        <div id="qr-reader" class="mt-4" style="position: relative; padding: 0px; border: none;"></div>
        <div id="qr-reader-results"></div>
      </div>
    </div>
  </div>
  <div class="container mt-5">
    <div id="formContainer"></div>

    <!-- Bootstrap Modal for Summary -->
    <div class="modal fade" id="summaryModal" tabindex="-1" role="dialog" aria-labelledby="summaryModalLabel"
      aria-hidden="true">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="summaryModalLabel">Summary</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-body" id="summaryContent">
            <!-- Summary content will be inserted here -->
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            <button type="button" class="btn btn-primary" id="finalButton" onclick="submitSummary()">Final</button>
          </div>
        </div>
      </div>
    </div>

    <!-- Bootstrap Alert for Success -->
    <div class="alert alert-success alert-dismissible fade" id="successAlert" role="alert">
      <strong>Success!</strong> Data has been submitted successfully.
      <button type="button" class="close" data-dismiss="alert" aria-label="Close">
        <span aria-hidden="true">&times;</span>
      </button>
    </div>

    <!-- Back to SO Button -->
    <div class="text-center mt-4">
      <button id="backToSOButton" class="btn btn-primary" onclick="navigateTo('SoView')" style="display: none;">Back to SO</button>
    </div>

    <?!= include('FunctionJS'); ?>
    <!-- See JavaScript.html file -->
    <?!= include('QrReaderJS'); ?>
    <!-- See QrReaderJS.html file -->
  </div>

  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.3/dist/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

  <script>
    const formContainer = document.getElementById('formContainer');
    const totalForms = 15;

    for (let i = 1; i <= totalForms; i++) {
      const formSection = document.createElement('div');
      formSection.className = 'form-section';
      formSection.id = `form${i}`;

      if (i === 1) formSection.classList.add('active');

      formSection.innerHTML = `
        <h2>LANE ${i}ECERAN / BIN</h2>
        <div class="form-group">
          <label for="mid${i}">MID</label>
          <input type="text" class="form-control" id="mid${i}" placeholder="Enter MID" required readonly>
          <div class="invalid-feedback">Please enter MID.</div>
        </div>
        <div class="form-group">
          <label for="name${i}">Name Product</label>
          <input type="text" class="form-control" id="name${i}" placeholder="Product Name" readonly>
          <div class="invalid-feedback">Please enter the product name.</div>
        </div>
<div class="form-group">
  <label for="quantity${i}">Quantity</label>
  <input type="text" class="form-control" id="quantity${i}" placeholder="Enter Quantity (e.g., 12+12+1+3)" oninput="calculateSum(${i})" required>
  <div class="invalid-feedback">Please enter the quantity.</div>
  <small id="quantityHelp${i}" class="form-text text-muted">Total: 0</small>
</div>
        <button class="btn btn-danger" onclick="rescan(${i})">Rescan</button>
        ${i > 1 ? `<button class="btn btn-secondary" onclick="previousForm(${i})">Back</button>` : ''}
        <button class="btn btn-primary" id="nextButton${i}" onclick="validateAndNextForm(${i})">${i === totalForms ? 'Submit' : 'Next'}</button>
      `;

      formContainer.appendChild(formSection);
    }

function validateAndNextForm(currentForm) {
  const form = document.getElementById(`form${currentForm}`);
  const inputs = form.querySelectorAll('input');
  let isValid = true;

  inputs.forEach(input => {
    if (input.required && !input.value) {
      input.classList.add('is-invalid');
      isValid = false;
    } else {
      input.classList.remove('is-invalid');
    }
  });

  // Validate the quantity input (only digits and '+' allowed)
  const quantityInput = document.getElementById(`quantity${currentForm}`);
  const quantityValue = quantityInput.value;
  const quantityRegex = /^[0-9+]+$/; // Regex to allow only numbers and '+'

  if (!quantityRegex.test(quantityValue)) {
    quantityInput.classList.add('is-invalid');
    document.getElementById(`quantityHelp${currentForm}`).textContent = 'Invalid input! Only numbers and + are allowed.';
    isValid = false;
  } else {
    quantityInput.classList.remove('is-invalid');
    document.getElementById(`quantityHelp${currentForm}`).textContent = `Expression: ${quantityValue} | Total: ${eval(quantityValue.replace(/[^0-9+\-*/().]/g, ''))}`;
  }

  // Proceed to the next form only if all inputs are valid
  if (isValid) {
    if (currentForm === totalForms) {
      showSummary();
    } else {
      const current = document.getElementById(`form${currentForm}`);
      const next = document.getElementById(`form${currentForm + 1}`);
      current.classList.remove('active');
      next.classList.add('active');
    }
  }
}



    function showSummary() {
      let summaryHtml = `
        <table class="table table-bordered">
          <thead>
            <tr>
              <th>Lane</th>
              <th>MID</th>
              <th>Product Name</th>
              <th>Quantity</th>
            </tr>
          </thead>
          <tbody>
      `;

      const timestamp = getLocalTimestamp();

      for (let i = 1; i <= totalForms; i++) {
        const mid = document.getElementById(`mid${i}`).value;
        const name = document.getElementById(`name${i}`).value;
        const quantity = document.getElementById(`quantity${i}`).value;

        // Kalkulasikan hasil penjumlahan quantity
        let totalQuantity;
        try {
          totalQuantity = eval(quantity.replace(/[^0-9+\-*/().]/g, '')); // Hanya hasil perhitungan
        } catch (e) {
          totalQuantity = quantity; // Jika gagal, gunakan nilai asli
        }

        if (mid || name || quantity) {
          summaryHtml += `
            <tr>
              <td>LANE ${i}ECERAN</td>
              <td>${mid}</td>
              <td>${name}</td>
              <td>${totalQuantity}</td> <!-- Tampilkan hasil perhitungan saja -->
            </tr>
          `;
        }
      }

      summaryHtml += `
          </tbody>
        </table>
      `;

      document.getElementById('summaryContent').innerHTML = summaryHtml;
      $('#summaryModal').modal('show');
    }

    function generateUniqueId() {
      return 'ZONAECERAN-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
      });
    }

    function getLocalTimestamp() {
      const now = new Date();
      const options = {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        hour12: false,
        timeZoneName: 'short'
      };
      return now.toLocaleString('en-US', options).replace(',', ''); // Example format: 08/18/2024 14:20:00 GMT+2
    }

    function submitSummary() {
      const finalButton = document.getElementById('finalButton');
      
      // Prevent multiple clicks by checking if the button is disabled
      if (finalButton.disabled) {
        return;
      }

      // Disable the button to prevent double submit
      finalButton.disabled = true;

      const summary = [];
      for (let i = 1; i <= totalForms; i++) {
        const mid = document.getElementById(`mid${i}`).value;
        const name = document.getElementById(`name${i}`).value;
        const quantity = document.getElementById(`quantity${i}`).value;
        const uniqueId = generateUniqueId();
        const timestamp = getLocalTimestamp();
        
        // Calculate the total quantity from the input quantity
        let totalQuantity;
        try {
          totalQuantity = eval(quantity.replace(/[^0-9+\-*/().]/g, '')); // Calculate total quantity
        } catch (e) {
          totalQuantity = quantity; // If failed to calculate, use the raw value
        }
        
        if (mid || name || quantity) {
          summary.push([`LANE ${i}ECERAN`, mid, name, totalQuantity, uniqueId, timestamp]);
        }
      }

      google.script.run.withSuccessHandler(function() {
        $('#summaryModal').modal('hide');
        $('#successAlert').addClass('show');

        // Hide the "Final" button and all "Submit" buttons
        finalButton.style.display = 'none';
        for (let i = 1; i <= totalForms; i++) {
          const nextButton = document.getElementById(`nextButton${i}`);
          if (nextButton) nextButton.style.display = 'none';
        }

        // Show the "Back to SO" button
        document.getElementById('backToSOButton').style.display = 'block';

        setTimeout(() => {
          $('#successAlert').removeClass('show');
        }, 5000); // Hide alert after 5 seconds
      }).submitDataSO(summary);
    }

function calculateSum(index) {
  const quantityInput = document.getElementById(`quantity${index}`);
  const helpText = document.getElementById(`quantityHelp${index}`);
  
  // Get the current input value (expression)
  const inputValue = quantityInput.value;

  // Calculate the sum using the input string
  try {
    const sum = eval(inputValue.replace(/[^0-9+\-*/().]/g, '')); // Only allow numbers and arithmetic operators
    helpText.textContent = `Expression: ${inputValue} | Total: ${isNaN(sum) ? 0 : sum}`; // Display both expression and sum
  } catch (e) {
    helpText.textContent = 'Invalid input';
  }
}


// Navigasi ke halaman lain
function navigateTo(page) {
  // Show a loading spinner
  insertLoadingSpinner();

  // Cek apakah halaman sudah ada di cache
  const cachedPage = localStorage.getItem(page);
  if (cachedPage) {
    // Jika ada di cache, load dari cache
    document.open();
    document.write(cachedPage);
    document.close();

    // Eksekusi ulang script inline setelah halaman dari cache dimuat
    executeInlineScripts();

    removeLoadingSpinner(); // Hapus spinner setelah halaman dari cache dimuat
  } else {
    // Jika tidak ada di cache, ambil dari server dan simpan di cache
    google.script.run.withSuccessHandler(function(html) {
      // Simpan halaman di cache (localStorage)
      localStorage.setItem(page, html);

      // Load halaman yang baru diambil dari server
      document.open();
      document.write(html);
      document.close();

      // Ekstrak dan evaluasi skrip inline setelah halaman dimuat
      executeInlineScripts();

      removeLoadingSpinner(); // Hapus spinner setelah halaman dari server dimuat
    }).loadPage(page);
  }
}


// Navigasi ke halaman lain
function navigateTo(page) {
  // Show a loading spinner
  insertLoadingSpinner();  // Dynamically insert spinner
  
  google.script.run.withSuccessHandler(function(html) {
    // Replace entire document content
    document.open();
    document.write(html);
    document.close();
  }).loadPage(page);
}

// Function to insert loading spinner into the body
function insertLoadingSpinner() {
  const spinnerHtml = `
    <div id="loadingSpinner" style="display: block; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 1000;">
      <div class="spinner-grow text-primary" role="status">
        <span class="visually-hidden"></span>
      </div>
      <div class="spinner-grow text-secondary" role="status">
        <span class="visually-hidden"></span>
      </div>
      <div class="spinner-grow text-success" role="status">
        <span class="visually-hidden"></span>
      </div>
      <div class="spinner-grow text-danger" role="status">
        <span class="visually-hidden"></span>
      </div>
      <div class="spinner-grow text-warning" role="status">
        <span class="visually-hidden"></span>
      </div>
      <div class="spinner-grow text-info" role="status">
        <span class="visually-hidden"></span>
      </div>
      <div class="spinner-grow text-light" role="status">
        <span class="visually-hidden"></span>
      </div>
      <div class="spinner-grow text-dark" role="status">
        <span class="visually-hidden"></span>
      </div>
    </div>
  `;

  // Append the spinner HTML to the body
  document.body.insertAdjacentHTML('beforeend', spinnerHtml);
}

// Function to remove the loading spinner after page load
function removeLoadingSpinner() {
  const spinner = document.getElementById('loadingSpinner');
  if (spinner) {
    spinner.remove(); // Remove spinner after the page has loaded
  }
}

  </script>
</body>

</html>
