<!-- index.html -->
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Real-Time Location System</title>
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">

  <!-- Font Awesome for icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">

  <style>
    /* Styling for the progress bars */
    .progress-container {
      margin: 20px 0;
    }

    /* Flex styling for 1A to 25A and 1B to 25B */
    .progress-wrapper {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px; /* Increased bottom margin */
      gap: 25px; /* Added horizontal spacing between elements */
    }

    /* Styling for 1E to 15E (progress bar and button inside same div) */
    .progress-wrapper-full {
      margin-bottom: 20px; /* Increased bottom margin */
      display: flex;
      align-items: center;
      justify-content: flex-start;
      gap: 25px; /* Added horizontal spacing between elements */
    }

    /* Flexbox properties for progress-bar */
    .progress-bar {
      flex: 1; /* Fill available space proportionally */
      height: 30px;
      background-color: #ddd;
      border-radius: 5px;
      overflow: hidden;
      position: relative;
      transition: opacity 0.5s ease-in-out;
    }

    .progress {
      flex: 1; /* Fill available space proportionally */
      height: 100%;
      background-color: #4caf50;
      border-radius: 5px;
      position: relative;
      display: flex;
      justify-content: center;
      align-items: center;
      color: white;
      font-weight: bold;
      white-space: nowrap;
      overflow: hidden;
      transition: width 1s cubic-bezier(0.4, 0.0, 0.2, 1), background-color 0.3s ease, opacity 0.5s ease-in-out;
    }

    /* RTL for progress bars */
    .rtl-progress {
      direction: rtl;
    }

    /* Standardize button size and spacing */
    button {
      padding: 10px;
      cursor: pointer;
    }

    /* Specific styling for progress bar buttons */
    .progress-button {
      width: 60px; /* Uniform width */
      height: 40px; /* Uniform height */
      flex-shrink: 0; /* Prevent shrinking */
    }

    /* Flexbox for buttons */
    .button-container {
      display: flex;
      justify-content: flex-end;
      align-items: flex-end;
    }

    .btn-custom {
      margin-left: 10px; /* Margin between buttons */
      padding: 10px 20px;
      font-size: 16px;
    }

    /* Smooth transition on hover */
    .btn-custom:hover {
      transform: scale(1.05);
      transition: all 0.3s ease-in-out;
    }

    /* Enhanced progress bar animation */
    .progress-animated {
      transition: width 1s cubic-bezier(0.4, 0.0, 0.2, 1), background-color 0.3s ease, opacity 0.5s ease-in-out;
    }

    /* Loading animation for progress bars and empty placeholders */
    .progress.loading::after,
    .empty-placeholder.loading::after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-image: linear-gradient(90deg, rgba(255, 255, 255, 0.2) 0%, rgba(255, 255, 255, 0.5) 50%, rgba(255, 255, 255, 0.2) 100%);
      background-size: 200% 100%;
      animation: loadingAnimation 1.5s infinite;
    }

    @keyframes loadingAnimation {
      from {
        background-position: 200% 0;
      }

      to {
        background-position: -200% 0;
      }
    }

    /* Margin below header */
    .header-title {
      margin-bottom: 30px;
    }

    /* Styling for empty placeholders with dashed lines */
    .empty-placeholder {
      flex: 1; /* Fill available space proportionally */
      height: 30px;
      background-color: transparent; /* Transparent */
      border: 2px dashed #ccc; /* Dashed lines */
      border-radius: 5px;
      transition: opacity 0.5s ease-in-out;
      pointer-events: none; /* Disable pointer interactions */
      position: relative; /* For positioning pseudo-elements */
    }

    /* Styling for disabled buttons */
    .disabled {
      pointer-events: none;
      opacity: 0.6;
      width: 60px; /* Match other buttons */
      height: 40px; /* Match other buttons */
      border: none;
      background-color: transparent;
    }
  </style>
</head>

<body class="container">
  <h2 class="text-center mt-4 header-title">Real-Time Location System</h2>

  <div class="row align-items-center">
    <div class="col-md-9">
      <div class="d-flex align-items-center">
        <!-- Filter functionality removed -->
        <!--
        <label for="datePicker" class="mr-2 mb-0">Select Date:</label>
        <input type="date" class="form-control mr-3" id="datePicker" name="datePicker" style="width: auto;">
        <label for="sessionPicker" class="mr-2 mb-0">Select Session:</label>
        <select id="sessionPicker" class="form-control mr-3" style="width: auto;">
          <option value="morning">Morning (01:00 - 12:00)</option>
          <option value="afternoon">Afternoon (13:00 - 24:00)</option>
        </select>
        -->
        <!--
        <button class="btn btn-primary btn-custom" onclick="loadProgressData()">Load Data</button>
        -->
      </div>
    </div>
    <div class="col-md-3 button-container">
      <button class="btn btn-danger btn-custom" onclick="navigateTo('Index')"><i class="fas fa-arrow-left me-2"></i> Back to Dashboard</button>
    </div>
  </div>

  <div id="progress-container" class="progress-container"></div>

  <script>
    /**
     * Function to create progress bars dynamically
     */
    function createProgressBars() {
      const progressContainer = document.getElementById('progress-container');
      progressContainer.innerHTML = ''; // Clear previous content if any

      // Loop for 1A to 26A and 1B to 26B
      for (let i = 1; i <= 26; i++) {
        const progressRow = document.createElement('div');
        progressRow.className = 'progress-wrapper';
        progressRow.id = `row${i}`;

        // Create Button A and Progress A
        const btnA = document.createElement('button');
        btnA.className = 'btn btn-secondary progress-button';
        btnA.id = `btnA${i}`;
        btnA.textContent = `${i}A`;
        btnA.setAttribute('data-toggle', 'popover'); // Enable Popover
        btnA.setAttribute('data-placement', 'right'); // Set Popover to appear on the right

        const progressBarA = document.createElement('div');
        progressBarA.className = 'progress-bar';
        const progressA = document.createElement('div');
        progressA.className = 'progress';
        progressA.id = `progressA${i}`;
        progressA.textContent = '0';

        progressBarA.appendChild(progressA);

        // Create Progress B and Button B
        const progressBarB = document.createElement('div');
        progressBarB.className = 'progress-bar rtl-progress';
        const progressB = document.createElement('div');
        progressB.className = 'progress';
        progressB.id = `progressB${i}`;
        progressB.textContent = '0';

        progressBarB.appendChild(progressB);

        const btnB = document.createElement('button');
        btnB.className = 'btn btn-secondary progress-button';
        btnB.id = `btnB${i}`;
        btnB.textContent = `${i}B`;
        btnB.setAttribute('data-toggle', 'popover'); // Enable Popover
        btnB.setAttribute('data-placement', 'left'); // Set Popover to appear on the left

        // Append everything to the row
        progressRow.appendChild(btnA);
        progressRow.appendChild(progressBarA);
        progressRow.appendChild(progressBarB);
        progressRow.appendChild(btnB);

        // Append row to the container
        progressContainer.appendChild(progressRow);
      }

      // Loop for 1E to 15E with button and progress bar inside the same div
      for (let i = 1; i <= 15; i++) {
        const eceranRow = document.createElement('div');
        eceranRow.className = 'progress-wrapper-full'; // **Perbaikan Kelas di Sini**
        eceranRow.id = `rowECERAN${i}`;

        // Create Button E and Progress E
        const btnE = document.createElement('button');
        btnE.className = 'btn btn-secondary progress-button';
        btnE.id = `btnE${i}`;
        btnE.textContent = `${i}E`;
        btnE.setAttribute('data-toggle', 'popover'); // Enable Popover
        btnE.setAttribute('data-placement', 'right'); // Set Popover to appear on the right

        const progressBarE = document.createElement('div');
        progressBarE.className = 'progress-bar';
        const progressE = document.createElement('div');
        progressE.className = 'progress';
        progressE.id = `progressE${i}`;
        progressE.textContent = '0';

        progressBarE.appendChild(progressE);

        // Append button and progress bar to the row
        eceranRow.appendChild(btnE);
        eceranRow.appendChild(progressBarE);

        // Add empty placeholder with dashed lines to maintain proportion
        const emptyPlaceholder = document.createElement('div');
        emptyPlaceholder.className = 'empty-placeholder'; // Assign a class for styling
        eceranRow.appendChild(emptyPlaceholder);

        // Optionally, add an empty button to balance the layout
        const emptyButton = document.createElement('button');
        emptyButton.className = 'btn btn-secondary progress-button disabled'; // Disabled button
        emptyButton.textContent = ''; // No text
        eceranRow.appendChild(emptyButton);

        // Append E row to the container
        progressContainer.appendChild(eceranRow);
      }
    }

    /**
     * Function to get maximum pallet number for a lane
     */
    function getMaxPallet(laneId) {
      const specialLanesA = ["11A", "17A", "23A"];
      const specialLanesB = ["10B", "22B"];
      if (specialLanesA.includes(laneId) || specialLanesB.includes(laneId)) {
        return 30;
      }
      return 75;
    }

    /**
     * Load data and populate the progress bars
     */
    function loadProgressData() {
      setProgressBarsLoading(); // Add loading animations

      google.script.run.withSuccessHandler(function (data) {
        resetProgressBars(); // Reset all progress bars and popovers

        // Define the MID values and corresponding colors
        const mids = ['L1', 'M1', 'XL1', 'L28', 'M32', 'XL26', 'L8', 'XL7', 'L11', 'M11', 'XL11'];
        const colors = ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)',
          'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)',
          'rgba(199, 199, 199, 1)', 'rgba(83, 102, 255, 1)', 'rgba(23, 206, 86, 1)',
          'rgba(200, 192, 132, 1)', 'rgba(199, 100, 64, 1)'];

        // Keep track of lanes that have data
        const lanesWithData = [];

        data.forEach((item) => {
          // Destructure item for easier access
          const { laneID, zona, quantity, mid, setting, date } = item;

          // Format the text to display in progress bars (e.g., "10 Pallet" or "180 Box")
          const formattedText = `${mid ? mid : 'N/A'} - ${quantity ? quantity : 0} ${laneID.endsWith('E') ? 'Box' : 'Pallet'}`;

          // Get maximum quantity for the lane
          let maxQuantity = getMaxPallet(laneID);
          if (laneID.endsWith('E')) maxQuantity = 300;

          // Adjust progress based on maxQuantity (75 or 300)
          const progressValue = quantity ? Math.min((quantity / maxQuantity) * 100, 100) : 0;

          // Determine the color based on the MID
          const midIndex = mids.indexOf(mid);
          let color = midIndex !== -1 ? colors[midIndex] : '#4caf50'; // Default color if not found

          // Match data to corresponding progress bars
          // Assuming laneID is in the format '1A', '2B', '3E', etc.
          let laneType = '';
          let laneNumber = '';

          if (laneID.endsWith('A')) {
            laneType = 'A';
            laneNumber = laneID.slice(0, -1);
          } else if (laneID.endsWith('B')) {
            laneType = 'B';
            laneNumber = laneID.slice(0, -1);
          } else if (laneID.endsWith('E')) {
            laneType = 'E';
            laneNumber = laneID.slice(0, -1); // Remove 'E'
          } else {
            console.warn(`Unrecognized lane ID format: ${laneID}`);
            return; // Skip unrecognized lane IDs
          }

          if (laneType === 'A') {
            const progressA = document.getElementById(`progressA${laneNumber}`);
            if (progressA) {
              progressA.style.width = `${progressValue}%`;
              progressA.textContent = formattedText;
              progressA.style.backgroundColor = color;
              progressA.classList.add('progress-animated'); // Add animation class

              const btnA = document.getElementById(`btnA${laneNumber}`);
              if (btnA) {
                btnA.setAttribute('data-content', `MID: ${mid ? mid : 'N/A'}<br>Quantity: ${quantity ? quantity : 0} Pallet<br>Date: ${date ? date : 'N/A'}`);
              }

              // Adjust text size if the progress bar is small
              if (progressValue < 30) {
                progressA.style.fontSize = '13px'; // Small text for small progress
              } else {
                progressA.style.fontSize = '14px'; // Normal size for larger progress
              }

              lanesWithData.push(`LANE ${laneNumber}A`);
            }
          } else if (laneType === 'B') {
            const progressB = document.getElementById(`progressB${laneNumber}`);
            if (progressB) {
              progressB.style.width = `${progressValue}%`;
              progressB.textContent = formattedText;
              progressB.style.backgroundColor = color;
              progressB.classList.add('progress-animated'); // Add animation class

              const btnB = document.getElementById(`btnB${laneNumber}`);
              if (btnB) {
                btnB.setAttribute('data-content', `MID: ${mid ? mid : 'N/A'}<br>Quantity: ${quantity ? quantity : 0} Pallet<br>Date: ${date ? date : 'N/A'}`);
              }

              if (progressValue < 30) {
                progressB.style.fontSize = '13px'; // Small text for small progress
              } else {
                progressB.style.fontSize = '14px'; // Normal size for larger progress
              }

              lanesWithData.push(`LANE ${laneNumber}B`);
            }
          } else if (laneType === 'E') {
            const progressE = document.getElementById(`progressE${laneNumber}`);
            if (progressE) {
              progressE.style.width = `${progressValue}%`;
              progressE.textContent = formattedText;
              progressE.style.backgroundColor = color;
              progressE.classList.add('progress-animated'); // Add animation class

              const btnE = document.getElementById(`btnE${laneNumber}`);
              if (btnE) {
                btnE.setAttribute('data-content', `MID: ${mid ? mid : 'N/A'}<br>Quantity: ${quantity ? quantity : 0} Box<br>Date: ${date ? date : 'N/A'}`);
              }

              if (progressValue < 30) {
                progressE.style.fontSize = '13px'; // Small text for small progress
              } else {
                progressE.style.fontSize = '14px'; // Normal size for larger progress
              }

              lanesWithData.push(`LANE ${laneNumber}E`);
            }
          }
        });

        // Set popovers for lanes without data
        setEmptyLanePopovers(lanesWithData);

        // Remove loading animations after data is processed
        removeProgressBarsLoading();

        // Activate Popovers
        $('[data-toggle="popover"]').popover({
          html: true,
          trigger: 'hover',
          placement: function (tip, element) {
            var placement = $(element).data('placement');
            return placement ? placement : 'right';
          }
        });

      }).getLaneStatusData(); // Call the backend function
    }

    /**
     * Reset all progress bars and popovers
     */
    function resetProgressBars() {
      const progressBars = document.querySelectorAll('.progress');
      progressBars.forEach(bar => {
        bar.style.width = '0%';
        bar.textContent = '0';
        bar.style.fontSize = '14px'; // Reset font size to normal
        bar.style.backgroundColor = '#4caf50'; // Reset to default color
        bar.classList.remove('progress-animated'); // Remove animation class
        bar.classList.remove('loading'); // Remove loading class if present
      });

      // Reset loading animation on empty placeholders
      const emptyPlaceholders = document.querySelectorAll('.empty-placeholder');
      emptyPlaceholders.forEach(placeholder => {
        placeholder.classList.remove('loading');
      });

      // Set all Popovers to indicate empty lanes
      const buttons = document.querySelectorAll('.progress-button');
      buttons.forEach(button => {
        button.setAttribute('data-content', 'Lane is empty');
      });

      // Reset all Popovers
      $('[data-toggle="popover"]').popover('dispose');
    }

    /**
     * Function to set popovers for empty lanes
     * @param {Array} lanesWithData - Array of lane identifiers that have data
     */
    function setEmptyLanePopovers(lanesWithData) {
      // For A and B lanes (1 to 26)
      for (let i = 1; i <= 26; i++) {
        if (!lanesWithData.includes(`LANE ${i}A`)) {
          const btnA = document.getElementById(`btnA${i}`);
          if (btnA) {
            btnA.setAttribute('data-content', 'Lane is empty');
          }
        }
        if (!lanesWithData.includes(`LANE ${i}B`)) {
          const btnB = document.getElementById(`btnB${i}`);
          if (btnB) {
            btnB.setAttribute('data-content', 'Lane is empty');
          }
        }
      }

      // For E lanes (1 to 15)
      for (let i = 1; i <= 15; i++) {
        if (!lanesWithData.includes(`LANE ${i}E`)) {
          const btnE = document.getElementById(`btnE${i}`);
          if (btnE) {
            btnE.setAttribute('data-content', 'Lane is empty');
          }
        }
      }
    }

    /**
     * Function to add loading animation to progress bars and empty placeholders
     */
    function setProgressBarsLoading() {
      const progressBars = document.querySelectorAll('.progress');
      progressBars.forEach(bar => {
        bar.classList.add('loading');
        bar.textContent = 'Loading...';
        bar.style.width = '100%';
      });

      const emptyPlaceholders = document.querySelectorAll('.empty-placeholder');
      emptyPlaceholders.forEach(placeholder => {
        placeholder.classList.add('loading');
      });
    }

    /**
     * Function to remove loading animation from progress bars and empty placeholders
     */
    function removeProgressBarsLoading() {
      const progressBars = document.querySelectorAll('.progress');
      progressBars.forEach(bar => {
        bar.classList.remove('loading');
      });

      const emptyPlaceholders = document.querySelectorAll('.empty-placeholder');
      emptyPlaceholders.forEach(placeholder => {
        placeholder.classList.remove('loading');
      });
    }

    /**
     * Initialize the page: create progress bars, load data, and set up real-time updates
     */
    window.onload = function () {
      createProgressBars(); // Create all progress bars dynamically
      loadProgressData(); // Automatically load data
      // Start polling for real-time updates every 10 seconds
      setInterval(loadProgressData, 10000); // 10000 milliseconds = 10 seconds
    };

    /**
     * Navigate to another page
     * @param {string} page - The name of the page to navigate to
     */
    function navigateTo(page) {
      // Show a loading spinner
      insertLoadingSpinner(); // Dynamically insert spinner

      google.script.run.withSuccessHandler(function (html) {
        // Replace entire document content
        document.open();
        document.write(html);
        document.close();
        removeLoadingSpinner(); // Remove spinner after loading new page
      }).loadPage(page);
    }

    /**
     * Function to insert loading spinner into the body
     */
    function insertLoadingSpinner() {
      const spinnerHtml =
        `<div id="loadingSpinner" style="display: block; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 1000;">
          <div class="spinner-grow text-primary" role="status">
            <span class="visually-hidden"></span>
          </div>
          <div class="spinner-grow text-secondary" role="status">
            <span class="visually-hidden"></span>
          </div>
          <div class="spinner-grow text-success" role="status">
            <span class="visually-hidden"></span>
          </div>
          <div class="spinner-grow text-danger" role="status">
            <span class="visually-hidden"></span>
          </div>
          <div class="spinner-grow text-warning" role="status">
            <span class="visually-hidden"></span>
          </div>
          <div class="spinner-grow text-info" role="status">
            <span class="visually-hidden"></span>
          </div>
          <div class="spinner-grow text-light" role="status">
            <span class="visually-hidden"></span>
          </div>
          <div class="spinner-grow text-dark" role="status">
            <span class="visually-hidden"></span>
          </div>
        </div>`;
      // Append the spinner HTML to the body
      document.body.insertAdjacentHTML('beforeend', spinnerHtml);
    }

    /**
     * Function to remove the loading spinner after page load
     */
    function removeLoadingSpinner() {
      const spinner = document.getElementById('loadingSpinner');
      if (spinner) {
        spinner.remove(); // Remove spinner after the page has loaded
      }
    }
  </script>

  <!-- Include jQuery and Bootstrap JS -->
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>

</body>

</html>
